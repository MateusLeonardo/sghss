datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
  ATTENDANT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  MISSED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  cpf       String?  @unique
  role      Role     @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient?
  doctor    Doctor?
  attendant Attendant?
  admin     Admin?

  @@map("users")
}

model Patient {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bloodType   String?
  allergies   String?
  medications String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments   Appointment[]
  medicalRecords MedicalRecord[]

  @@map("patients")
}

model Doctor {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty String
  crm       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments   Appointment[]
  medicalRecords MedicalRecord[]

  @@map("doctors")
}

model Attendant {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessCode String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  appointments Appointment[] @relation("AttendantAppointments")

  @@map("attendants")
}

model Admin {
  id         Int      @id @default(autoincrement())
  accessCode String?  @unique
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("admins")
}

model Appointment {
  id          Int               @id @default(autoincrement())
  patientId   Int
  doctorId    Int
  attendantId Int?
  date        DateTime
  status      AppointmentStatus @default(PENDING)
  reason      String?
  notes       String?
  duration    Int               @default(30)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  patient   Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor    Doctor     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  attendant Attendant? @relation("AttendantAppointments", fields: [attendantId], references: [id], onDelete: SetNull)

  @@index([patientId])
  @@index([doctorId])
  @@index([attendantId])
  @@index([date])
  @@index([status])
  @@map("appointments")
}

model MedicalRecord {
  id           Int      @id @default(autoincrement())
  patientId    Int
  doctorId     Int
  date         DateTime @default(now())
  diagnosis    String
  prescription String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([doctorId])
  @@map("medical_records")
}
